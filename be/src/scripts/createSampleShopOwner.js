const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const userModel = require('../models/user.model');
const shopModel = require('../models/shop.model');
const shopImageModel = require('../models/shopImage.model');
const shopSeatModel = require('../models/shopSeat.model');
const shopMenuItemModel = require('../models/shopMenuItem.model');
const shopTimeSlotModel = require('../models/shopTimeSlot.model');
const shopVerificationModel = require('../models/shopVerification.model');
const shopAmenityModel = require('../models/shopAmenity.model');
const shopThemeModel = require('../models/shopTheme.model');
const menuItemCategoryModel = require('../models/menuItemCategory.model');
const reservationModel = require('../models/reservation.model');
const reviewModel = require('../models/review.model');

const createSampleData = async () => {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.DB_URL || 'mongodb://localhost:27017/checkafe');
    console.log('Connected to MongoDB');

    // Clear existing sample data
    console.log('üßπ Cleaning existing sample data...');
    await userModel.deleteMany({ email: { $in: ['shopowner@checkafe.com', 'customer@checkafe.com'] } });
    await shopModel.deleteMany({ name: 'Cafe S√†i G√≤n' });
    await shopAmenityModel.deleteMany({});
    await shopThemeModel.deleteMany({});
    await menuItemCategoryModel.deleteMany({});
    console.log('‚úÖ Cleaned existing data');

    // 1. Create Shop Owner User
    const hashedPassword = await bcrypt.hash('123456', 10);
    
    const shopOwner = await userModel.create({
      email: 'shopowner@checkafe.com',
      password: hashedPassword,
      full_name: 'Nguy·ªÖn VƒÉn Qu√°n',
      role: 'SHOP_OWNER',
      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
      phone: '0901234567',
      is_verified: true
    });
    console.log('‚úÖ Created shop owner:', shopOwner.email);

    // 2. Create Customer User for reviews
    const customer = await userModel.create({
      email: 'customer@checkafe.com',
      password: hashedPassword,
      full_name: 'Tr·∫ßn Th·ªã Kh√°ch',
      role: 'CUSTOMER',
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',
      phone: '0987654321',
      is_verified: true
    });
    console.log('‚úÖ Created customer:', customer.email);

    // 3. Create Amenities
    const amenities = await shopAmenityModel.insertMany([
      { icon: 'wifi', label: 'Wifi mi·ªÖn ph√≠' },
      { icon: 'parking', label: 'B√£i ƒë·ªó xe' },
      { icon: 'air-conditioning', label: 'M√°y l·∫°nh' },
      { icon: 'outdoor-seating', label: 'Ch·ªó ng·ªìi ngo√†i tr·ªùi' },
      { icon: 'power-outlets', label: '·ªî c·∫Øm ƒëi·ªán' }
    ]);
    console.log('‚úÖ Created amenities');

    // 4. Create Themes
    const themes = await shopThemeModel.insertMany([
      { 
        name: 'Vintage', 
        description: 'Phong c√°ch c·ªï ƒëi·ªÉn, ho√†i c·ªï',
        theme_image: 'https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=400&h=300&fit=crop'
      },
      { 
        name: 'Modern', 
        description: 'Phong c√°ch hi·ªán ƒë·∫°i, t·ªëi gi·∫£n',
        theme_image: 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=400&h=300&fit=crop'
      },
      { 
        name: 'Industrial', 
        description: 'Phong c√°ch c√¥ng nghi·ªáp',
        theme_image: 'https://images.unsplash.com/photo-1559925393-8be0ec4767c8?w=400&h=300&fit=crop'
      }
    ]);
    console.log('‚úÖ Created themes');

    // 5. Create Menu Categories
    const categories = await menuItemCategoryModel.insertMany([
      { name: 'C√† ph√™', description: 'C√°c lo·∫°i c√† ph√™' },
      { name: 'Tr√†', description: 'C√°c lo·∫°i tr√†' },
      { name: 'B√°nh ng·ªçt', description: 'B√°nh v√† ƒë·ªì ng·ªçt' },
      { name: 'ƒê·ªì u·ªëng l·∫°nh', description: 'N∆∞·ªõc √©p, sinh t·ªë' }
    ]);
    console.log('‚úÖ Created menu categories');

    // 6. Create Shop
    const shop = await shopModel.create({
      name: 'Cafe S√†i G√≤n',
      address: '123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM',
      description: 'Qu√°n c√† ph√™ v·ªõi kh√¥ng gian tho√°ng ƒë√£ng, view ƒë·∫πp v√† ƒë·ªì u·ªëng ch·∫•t l∆∞·ª£ng cao. Ph√π h·ª£p cho l√†m vi·ªác v√† g·∫∑p g·ª° b·∫°n b√®.',
      phone: '0901234567',
      website: 'https://cafesaigon.com',
      location: {
        type: 'Point',
        coordinates: [106.7008, 10.7769] // Nguy·ªÖn Hu·ªá, Q1, HCM
      },
      owner_id: shopOwner._id,
      amenities: amenities.slice(0, 3).map(a => a._id),
      theme_ids: [themes[0]._id, themes[1]._id],
      status: 'Active',
      vip_status: true,
      rating_avg: 4.5,
      rating_count: 25,
      opening_hours: [
        {
          day: 0, // Sunday
          is_closed: false,
          hours: [{ open: '07:00', close: '22:00' }]
        },
        {
          day: 1, // Monday
          is_closed: false,
          hours: [{ open: '07:00', close: '22:00' }]
        },
        {
          day: 2, // Tuesday
          is_closed: false,
          hours: [{ open: '07:00', close: '22:00' }]
        },
        {
          day: 3, // Wednesday
          is_closed: false,
          hours: [{ open: '07:00', close: '22:00' }]
        },
        {
          day: 4, // Thursday
          is_closed: false,
          hours: [{ open: '07:00', close: '22:00' }]
        },
        {
          day: 5, // Friday
          is_closed: false,
          hours: [{ open: '07:00', close: '23:00' }]
        },
        {
          day: 6, // Saturday
          is_closed: false,
          hours: [{ open: '07:00', close: '23:00' }]
        }
      ]
    });
    console.log('‚úÖ Created shop:', shop.name);

    // 7. Create Shop Images
    const shopImages = await shopImageModel.insertMany([
      {
        shop_id: shop._id,
        url: 'https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=800&h=600&fit=crop',
        caption: 'Kh√¥ng gian ch√≠nh c·ªßa qu√°n'
      },
      {
        shop_id: shop._id,
        url: 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?w=800&h=600&fit=crop',
        caption: 'Khu v·ª±c l√†m vi·ªác'
      },
      {
        shop_id: shop._id,
        url: 'https://images.unsplash.com/photo-1559925393-8be0ec4767c8?w=800&h=600&fit=crop',
        caption: 'Qu·∫ßy bar'
      }
    ]);
    console.log('‚úÖ Created shop images');

    // 8. Create Seats
    const seats = await shopSeatModel.insertMany([
      {
        shop_id: shop._id,
        seat_name: 'B√†n VIP 1',
        description: 'B√†n VIP v·ªõi view ƒë·∫πp',
        image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',
        is_premium: true,
        is_available: true,
        capacity: 4
      },
      {
        shop_id: shop._id,
        seat_name: 'B√†n VIP 2',
        description: 'B√†n VIP ri√™ng t∆∞',
        image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop',
        is_premium: true,
        is_available: true,
        capacity: 2
      },
      {
        shop_id: shop._id,
        seat_name: 'B√†n th∆∞·ªùng 1',
        description: 'B√†n th∆∞·ªùng g·∫ßn c·ª≠a s·ªï',
        is_premium: false,
        is_available: true,
        capacity: 2
      },
      {
        shop_id: shop._id,
        seat_name: 'B√†n th∆∞·ªùng 2',
        description: 'B√†n th∆∞·ªùng trung t√¢m',
        is_premium: false,
        is_available: true,
        capacity: 4
      },
      {
        shop_id: shop._id,
        seat_name: 'B√†n th∆∞·ªùng 3',
        description: 'B√†n th∆∞·ªùng g·∫ßn qu·∫ßy',
        is_premium: false,
        is_available: false,
        capacity: 2
      }
    ]);
    console.log('‚úÖ Created seats');

    // 9. Create Menu Items
    const menuItems = await shopMenuItemModel.insertMany([
      {
        shop_id: shop._id,
        name: 'C√† ph√™ s·ªØa ƒë√°',
        description: 'C√† ph√™ truy·ªÅn th·ªëng Vi·ªát Nam v·ªõi s·ªØa ƒë·∫∑c',
        price: 25000,
        category: categories[0]._id,
        images: [{
          url: 'https://images.unsplash.com/photo-1509042239860-f550ce710b93?w=400&h=400&fit=crop',
          publicId: 'coffee1'
        }],
        is_available: true
      },
      {
        shop_id: shop._id,
        name: 'Cappuccino',
        description: 'C√† ph√™ √ù v·ªõi b·ªçt s·ªØa m·ªãn',
        price: 45000,
        category: categories[0]._id,
        images: [{
          url: 'https://images.unsplash.com/photo-1572442388796-11668a67e53d?w=400&h=400&fit=crop',
          publicId: 'coffee2'
        }],
        is_available: true
      },
      {
        shop_id: shop._id,
        name: 'Tr√† ƒë√†o cam s·∫£',
        description: 'Tr√† th·∫£o m·ªôc v·ªõi ƒë√†o, cam v√† s·∫£ t∆∞∆°i',
        price: 35000,
        category: categories[1]._id,
        images: [{
          url: 'https://images.unsplash.com/photo-1556679343-c7306c1976bc?w=400&h=400&fit=crop',
          publicId: 'tea1'
        }],
        is_available: true
      },
      {
        shop_id: shop._id,
        name: 'B√°nh tiramisu',
        description: 'B√°nh tiramisu √ù truy·ªÅn th·ªëng',
        price: 55000,
        category: categories[2]._id,
        images: [{
          url: 'https://images.unsplash.com/photo-1571877227200-a0d98ea607e9?w=400&h=400&fit=crop',
          publicId: 'cake1'
        }],
        is_available: true
      },
      {
        shop_id: shop._id,
        name: 'Sinh t·ªë b∆°',
        description: 'Sinh t·ªë b∆° t∆∞∆°i v·ªõi s·ªØa ƒë·∫∑c',
        price: 40000,
        category: categories[3]._id,
        images: [{
          url: 'https://images.unsplash.com/photo-1553530666-ba11a7da3888?w=400&h=400&fit=crop',
          publicId: 'smoothie1'
        }],
        is_available: false
      }
    ]);
    console.log('‚úÖ Created menu items');

    // 10. Create Time Slots
    const timeSlots = [];
    for (let day = 0; day < 7; day++) {
      timeSlots.push(
        {
          shop_id: shop._id,
          day_of_week: day,
          start_time: '07:00',
          end_time: '10:00',
          max_regular_reservations: 5,
          max_premium_reservations: 2,
          is_active: true
        },
        {
          shop_id: shop._id,
          day_of_week: day,
          start_time: '10:00',
          end_time: '14:00',
          max_regular_reservations: 8,
          max_premium_reservations: 3,
          is_active: true
        },
        {
          shop_id: shop._id,
          day_of_week: day,
          start_time: '14:00',
          end_time: '18:00',
          max_regular_reservations: 10,
          max_premium_reservations: 4,
          is_active: true
        },
        {
          shop_id: shop._id,
          day_of_week: day,
          start_time: '18:00',
          end_time: '22:00',
          max_regular_reservations: 12,
          max_premium_reservations: 5,
          is_active: true
        }
      );
    }
    const savedTimeSlots = await shopTimeSlotModel.insertMany(timeSlots);
    console.log('‚úÖ Created time slots');

    // 11. Create Verification
    await shopVerificationModel.create({
      shop_id: shop._id,
      document_type: 'business_license',
      documents: [{
        url: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=600&h=400&fit=crop',
        publicId: 'doc1'
      }],
      status: 'Approved',
      submitted_at: new Date(),
      reviewed_at: new Date(),
      reason: 'Gi·∫•y ph√©p h·ª£p l·ªá'
    });
    console.log('‚úÖ Created verification');

    // 12. Create Sample Reservations
    const reservations = [];
    const statuses = ['Pending', 'Confirmed', 'Completed', 'Cancelled'];
    
    for (let i = 0; i < 20; i++) {
      const randomDate = new Date();
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 30));
      
      reservations.push({
        user_id: customer._id,
        shop_id: shop._id,
        seat_id: seats[Math.floor(Math.random() * seats.length)]._id,
        time_slot_id: savedTimeSlots[Math.floor(Math.random() * savedTimeSlots.length)]._id,
        reservation_type: Math.random() > 0.7 ? 'Priority' : 'Standard',
        reservation_date: randomDate,
        number_of_people: Math.floor(Math.random() * 4) + 1,
        notes: 'ƒê·∫∑t ch·ªó qua ·ª©ng d·ª•ng',
        status: statuses[Math.floor(Math.random() * statuses.length)],
        qr_code: `qr_${i}_${Date.now()}`,
        createdAt: randomDate
      });
    }
    await reservationModel.insertMany(reservations);
    console.log('‚úÖ Created sample reservations');

    // 13. Create Sample Reviews
    const reviews = [];
    const comments = [
      'Qu√°n r·∫•t ƒë·∫πp, kh√¥ng gian tho√°ng m√°t',
      'C√† ph√™ ngon, nh√¢n vi√™n th√¢n thi·ªán',
      'View ƒë·∫πp, ph√π h·ª£p l√†m vi·ªác',
      'Gi√° c·∫£ h·ª£p l√Ω, ch·∫•t l∆∞·ª£ng t·ªët',
      'S·∫Ω quay l·∫°i l·∫ßn sau'
    ];
    
    for (let i = 0; i < 25; i++) {
      const randomDate = new Date();
      randomDate.setDate(randomDate.getDate() - Math.floor(Math.random() * 60));
      
      reviews.push({
        shop_id: shop._id,
        user_id: customer._id,
        rating: Math.floor(Math.random() * 2) + 4, // 4-5 stars
        comment: comments[Math.floor(Math.random() * comments.length)],
        images: [],
        createdAt: randomDate
      });
    }
    await reviewModel.insertMany(reviews);
    console.log('‚úÖ Created sample reviews');

    console.log('\nüéâ Sample data created successfully!');
    console.log('\nüìã Login credentials:');
    console.log('Shop Owner:');
    console.log('  Email: shopowner@checkafe.com');
    console.log('  Password: 123456');
    console.log('\nCustomer:');
    console.log('  Email: customer@checkafe.com');
    console.log('  Password: 123456');
    console.log('\nüè™ Shop created: Cafe S√†i G√≤n');
    console.log('üìä Stats:');
    console.log(`  - ${seats.length} seats`);
    console.log(`  - ${menuItems.length} menu items`);
    console.log(`  - ${savedTimeSlots.length} time slots`);
    console.log(`  - 20 reservations`);
    console.log(`  - 25 reviews`);

  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
  } finally {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  }
};

// Run the script
createSampleData(); 